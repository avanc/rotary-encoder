#! /usr/bin/env python2

import logging
logger = logging.getLogger(__name__)

import json
import argparse
import os

parser = argparse.ArgumentParser(description='Reading GPIOs connected to rotary encoders.')

parser.add_argument('-c', '--configfile',
                    metavar='/etc/rotencoder.cfg',
                    default="/etc/rotencoder.cfg",
                    help='Path to configuration file')

from evdev import UInput, ecodes

from rotencoder import rotary

CAPABILITIES = { ecodes.EV_REL : [ecodes.REL_WHEEL],
                 ecodes.EV_KEY : [ecodes.BTN_LEFT] }



class RotaryDevice(rotary.RotaryEncoder):
    def __init__(self, gpio_a, gpio_b, gpio_p, name="Rotary"):
        super(RotaryDevice, self).__init__(gpio_a, gpio_b, gpio_p)
        self.ui = UInput(CAPABILITIES, name=name)

    def report_rotation(self, direction):
        if (direction==rotary.LEFT):
            self.ui.write(ecodes.EV_REL, ecodes.REL_WHEEL, -1)
        else:
            self.ui.write(ecodes.EV_REL, ecodes.REL_WHEEL, 1)
        self.ui.syn()

    def report_push(self, pushed):
        if (pushed):
            self.ui.write(ecodes.EV_KEY, ecodes.BTN_LEFT, 1)
        else:
            self.ui.write(ecodes.EV_KEY, ecodes.BTN_LEFT, 0)
        self.ui.syn()


options = parser.parse_args()
if not os.path.isfile(options.configfile):
    parser.error("No configuration file found at {0}".format(options.configfile))
    
config=json.load(open(options.configfile))


for encoder in config:
    RotaryDevice(encoder["rotaryA"], encoder["rotaryB"], encoder["push"], encoder["name"])


import signal
signal.pause()

